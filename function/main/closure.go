package main

import "fmt"

/*
	闭包=函数+引用环境
	支持闭包的语言有很多，这些语言都有一个特点，就是支持垃圾回收机制

	函数a的返回值是func() int类型，返回了一个内部函数b，
	所以当有外部变量调用函数a时，其实是指向了函数b，也就是说，当函数a()外的变量c引用了函数a()内部的函数b()，
	那么就创建了一个闭包。由于闭包的存在，使得函数a()返回后，a()中的变量i始终存在，不会被回收
*/
func a() func() int {
	i := 0
	fmt.Println(i)
	//匿名函数
	b := func() int {
		i++
		fmt.Println(i)
		return i
	}
	return b
}

//func main() {
//	c := a()
//	//输出1
//	c()
//	//输出2
//	c()
//
//	//直接调用a()是不会输出函数b中的内容的，因为没有接收返回值函数b()，即b()没有被外界引用，但是会执行函数a中自己的逻辑
//	a()
//
//	//c跟c2引用的是不同的环境，函数a每进入一次就形成了一个新的环境
//	c2 := a()
//	//输出1
//	c2()
//	//输出2
//	c2()
//}
